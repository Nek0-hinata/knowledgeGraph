// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Permission {
  User
  Admin
}

model users {
  id                String             @id @default(cuid())
  username          String
  name              String
  status            Status             @default(NORMAL)
  // 身份证
  idNumber          String
  phoneNumber       String
  email             String             @unique
  password          String
  permission        Permission         @default(User)
  internetDetails   internetDetail[]
  billingStatements billingStatement[]
  log               log[]
}

model internetDetail {
  id             String   @id @default(cuid())
  signInTime     DateTime @default(now())
  signOutTime    DateTime @default(now())
  macAddress     String
  ipAddress      String
  currentTraffic Int      @default(0)
  duration       Int      @default(0)
  userId         String
  users          users    @relation(fields: [userId], references: [id])
}

model billingStatement {
  id              String   @id @default(cuid())
  product         String
  totalTraffic    Float
  totalOnlineTime Int
  billingTime     DateTime
  userId          String
  users           users    @relation(fields: [userId], references: [id])
}

model log {
  id           String   @id @default(cuid())
  ipAddress    String
  macAddress   String
  errorMessage String
  recordTime   DateTime @default(now())
  users        users?   @relation(fields: [usersId], references: [id])
  usersId      String?
}

enum Status {
  NORMAL
  ABNORMAL
}

enum ArticleStatus {
  Finished
  UnFinished
}

model article {
  id            Int           @id @default(autoincrement())
  title         String
  content       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  articleStatus ArticleStatus @default(UnFinished)
  sentences     sentence[]
}

model sentence {
  id            Int           @id @default(autoincrement())
  content       String
  articleId     Int
  startPosition Int
  endPosition   Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  article       article       @relation(fields: [articleId], references: [id])
  tags          tag[]         @relation("SentenceToTag")
  sentenceTag   sentenceTag[]
}

model tag {
  id          Int           @id @default(autoincrement())
  name        String
  color       String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sentences   sentence[]    @relation("SentenceToTag")
  sentenceTag sentenceTag[]
}

enum TagStatus {
  Pending
  Approved
  Rejected
}

model sentenceTag {
  id         Int       @id @default(autoincrement())
  sentenceId Int
  tagId      Int
  status     TagStatus @default(Pending) // 新增字段，表示标签的审核状态
  reviewedBy String? // 新增字段，表示审核该标签的管理员
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  sentence   sentence  @relation(fields: [sentenceId], references: [id])
  tag        tag       @relation(fields: [tagId], references: [id])
}
