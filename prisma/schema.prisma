// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Permission {
  User
  Admin
}

model users {
  id             String     @id @default(cuid())
  username       String
  status         Status     @default(NORMAL)
  phoneNumber    String?
  lastSignInTime DateTime
  email          String     @unique
  password       String
  permission     Permission @default(User)
}

enum Status {
  NORMAL
  ABNORMAL
}

enum ArticleStatus {
  Finished
  UnFinished
}

model article {
  id            Int           @id @default(autoincrement())
  title         String
  content       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  articleStatus ArticleStatus @default(UnFinished)
  sentences     sentence[]
}

model sentence {
  id            Int           @id @default(autoincrement())
  content       String
  articleId     Int
  startPosition Int
  endPosition   Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  article       article       @relation(fields: [articleId], references: [id])
  tags          sentenceTag[]
}

model tag {
  id         Int           @id @default(autoincrement())
  name       String
  color      String        @unique
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  sentences  sentenceTag[]
  tagLinks   tagLink[]     @relation("TagLinks")
  linkedTags tagLink[]     @relation("LinkedTags")
}

enum TagStatus {
  Pending
  Approved
  Rejected
}

model sentenceTag {
  sentenceId Int
  tagId      Int
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  sentence   sentence  @relation(fields: [sentenceId], references: [id])
  tag        tag       @relation(fields: [tagId], references: [id])
  status     TagStatus @default(Pending) // 新增字段，表示标签的审核状态
  reviewedBy String? // 新增字段，表示审核该标签的管理员

  @@id([sentenceId, tagId], name: "sentenceTagId")
}

// 新增模型，表示tag与tag的关联
model tagLink {
  id          Int      @id @default(autoincrement())
  tagId       Int
  linkedTagId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tag         tag      @relation("TagLinks", fields: [tagId], references: [id])
  linkedTag   tag      @relation("LinkedTags", fields: [linkedTagId], references: [id])

  @@unique([tagId, linkedTagId])
}
